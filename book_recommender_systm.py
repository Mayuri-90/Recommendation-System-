# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ezjOSoUSPXeSbPr_gj7T8TcgD0gXFZ0N
"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors

book = pd.read_csv('/content/drive/MyDrive/ML Project/BX_Books.csv', sep=';', error_bad_lines=False, encoding="latin-1")


book.head(2)


print('book_Shape',book.shape)

book.info()

book = book[['ISBN','Book-Title','Book-Author','Year-Of-Publication','Publisher']]
book.head(2)

users = pd.read_csv('/content/drive/MyDrive/ML Project/BX-Users.csv',  sep=';', error_bad_lines=False, encoding= "latin-1")
users.head()

print('users_Shape',users.shape)

rating = pd.read_csv('/content/drive/MyDrive/ML Project/BX-Book-Ratings.csv', sep=';', error_bad_lines=False, encoding="latin-1")
rating.head()

print('rating_Shape',rating.shape)

rating.info()

rating['User-ID'].value_counts().shape

x =rating['User-ID'].value_counts()>200

y = x[x].index
y

rating = rating[rating['User-ID'].isin(y)]
rating.shape

users['User-ID'].value_counts().shape

book_data =rating.merge(book, on='ISBN')

book_data.shape

number_of_rating= book_data.groupby('Book-Title')['Book-Rating'].count().reset_index()

number_of_rating.rename(columns = {'Book-Rating':'number_of_rating'},inplace = True)

final_rating = book_data.merge(number_of_rating,on = 'Book-Title')

final_rating.head()

final_rating = final_rating[final_rating['number_of_rating']>= 50]
final_rating.shape

final_rating.drop_duplicates(['User-ID','Book-Title'],inplace=True)
final_rating.shape

book_pivot = final_rating.pivot_table(columns='User-ID',index = 'Book-Title',values = 'Book-Rating')

book_pivot.fillna(0,inplace=True)
book_pivot

book_sparse = csr_matrix(book_pivot)

model = NearestNeighbors(algorithm='brute')

model.fit(book_sparse)

distance,suggestions = model.kneighbors(book_pivot.iloc[237,:].values.reshape(1,-1),n_neighbors=6)

distance

for i in range(len(suggestions)):
  print(book_pivot.index[suggestions[i]])

def recommend_book(book_name):
  book_id = np.where(book_pivot.index ==book_name)[0][0]
  distance,suggestions = model.kneighbors(book_pivot.iloc[book_id,:].values.reshape(1,-1),n_neighbors=6)
  for i in range(len(suggestions)):
     if i == 0:
      print('The sugesstions for',book_name,'are :')
     if not i:
       print(book_pivot.index[suggestions[i]])

recommend_book('Pleading Guilty')

